{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SSB Project CLI","text":""},{"location":"#features","title":"Features","text":"<ul> <li>Create a new project quickly and easily with <code>ssb-project create</code>.</li> <li>Your colleagues can quickly get started when you share the project with them with <code>ssb-project build</code>.</li> <li>Includes:</li> <li>Local directory structure</li> <li>Virtual Environment</li> <li>Kernel for use on Jupyter</li> <li>Github repo (if desired)</li> <li>The project will follow the most recent SSB guidelines for security and quality.</li> <li>It will always be possible to update existing projects as guidelines change.</li> </ul> <p>:sparkles: Now allows specifying any Cookiecutter template which uses Poetry, for example</p> <pre><code>ssb-project create my-project --template-git-url https://github.com/cjolowicz/cookiecutter-hypermodern-python\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<p>You can install SSB Project CLI via [pip] from [PyPI]:</p> <pre><code>pip install ssb-project-cli\n</code></pre>"},{"location":"#releasing-a-new-version","title":"Releasing a new version","text":"<p>To release a new version of the CLI, run the following sequence.</p> <pre><code>git switch --create release main\n</code></pre> <pre><code>poetry version &lt;version&gt;\n</code></pre> <pre><code>git commit --message=\"&lt;project&gt; &lt;version&gt;\" pyproject.toml\n</code></pre> <pre><code>git push origin release\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":""},{"location":"#setup","title":"Setup","text":"<ol> <li>Install dependencies</li> <li>Install pre-commit hooks</li> <li>Run tests: <code>nox -r</code> (More information here)</li> <li>Run the help command: <code>poetry run ssb-project --help</code></li> </ol>"},{"location":"#license","title":"License","text":"<p>Distributed under the terms of the MIT license, SSB Project CLI is free and open source software.</p>"},{"location":"CODE_OF_CONDUCT/","title":"CODE OF CONDUCT","text":"<p>```{include} ../CODE_OF_CONDUCT.md</p> <p>```</p>"},{"location":"contributing/","title":"Contributor Guide","text":"<p>Thank you for your interest in improving this project. This project is open-source under the MIT license and welcomes contributions in the form of bug reports, feature requests, and pull requests.</p> <p>Here is a list of important resources for contributors:</p> <ul> <li>Source Code</li> <li>Documentation</li> <li>Issue Tracker</li> <li>Code of Conduct</li> </ul>"},{"location":"contributing/#how-to-report-a-bug","title":"How to report a bug","text":"<p>Report bugs on the Issue Tracker.</p> <p>When filing an issue, make sure to answer these questions:</p> <ul> <li>Which operating system and Python version are you using?</li> <li>Which version of this project are you using?</li> <li>What did you do?</li> <li>What did you expect to see?</li> <li>What did you see instead?</li> </ul> <p>The best way to get your bug fixed is to provide a test case, and/or steps to reproduce the issue.</p>"},{"location":"contributing/#how-to-request-a-feature","title":"How to request a feature","text":"<p>Request features on the Issue Tracker.</p>"},{"location":"contributing/#how-to-set-up-your-development-environment","title":"How to set up your development environment","text":"<p>You need Python 3.7+ and the following tools:</p> <ul> <li>Poetry</li> <li>Nox</li> <li>nox-poetry</li> </ul> <p>Install the package with development requirements:</p> <pre><code>$ poetry install\n</code></pre> <p>You can now run an interactive Python session, or the command-line interface:</p> <pre><code>$ poetry run python\n$ poetry run ssb-project-cli\n</code></pre>"},{"location":"contributing/#how-to-test-the-project","title":"How to test the project","text":"<p>Run the full test suite:</p> <pre><code>$ nox\n</code></pre> <p>List the available Nox sessions:</p> <pre><code>$ nox --list-sessions\n</code></pre> <p>You can also run a specific Nox session. For example, invoke the unit test suite like this:</p> <pre><code>$ nox --session=tests\n</code></pre> <p>Unit tests are located in the tests directory, and are written using the pytest testing framework.</p>"},{"location":"contributing/#how-to-submit-changes","title":"How to submit changes","text":"<p>Open a pull request to submit changes to this project.</p> <p>Your pull request needs to meet the following guidelines for acceptance:</p> <ul> <li>The Nox test suite must pass without errors and warnings.</li> <li>Include unit tests. This project maintains 100% code coverage.</li> <li>If your changes add functionality, update the documentation accordingly.</li> </ul> <p>Feel free to submit early, though\u2014we can always iterate on this.</p> <p>To run linting and code formatting checks before committing your change, you can install pre-commit as a Git hook by running the following command:</p> <pre><code>$ nox --session=pre-commit -- install\n</code></pre> <p>It is recommended to open an issue before starting work on anything. This will allow a chance to talk it over with the owners and validate your approach.</p>"},{"location":"license/","title":"License","text":""},{"location":"license/#literalinclude-license","title":"```{literalinclude} ../LICENSE","text":""},{"location":"license/#language-none","title":"language: none","text":"<p>```</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#ssb_project_cli","title":"ssb_project_cli","text":"<pre><code>.. automodule:: ssb_project_cli\n   :members:\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#app","title":"app","text":"<p>Usage instructions: https://manual.dapla.ssb.no/ssbproject.html</p> <p>Usage:</p> <pre><code> [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or\n                        customize the installation.\n</code></pre>"},{"location":"usage/#build","title":"build","text":"<p>:wrench:  Create a virtual environment and corresponding Jupyter kernel. Runs in the current folder if no arguments are supplied.</p> <p>Usage:</p> <pre><code> build [OPTIONS] [PATH]\n</code></pre> <p>Options:</p> <pre><code>  [PATH]       Project path\n  --no-verify  Disable verification of git configuration files.\n  --no-kernel  Do not install a kernel after the project is built (defaults to\n               False).\n</code></pre>"},{"location":"usage/#clean","title":"clean","text":"<p>:broom:  Delete the kernel for the given project name.</p> <p>Usage:</p> <pre><code> clean [OPTIONS] PROJECT_NAME\n</code></pre> <p>Options:</p> <pre><code>  PROJECT_NAME  The name of the project/kernel you want to delete.\n                \\[required]\n</code></pre>"},{"location":"usage/#create","title":"create","text":"<p>:sparkles:  Create a project locally, and optionally on GitHub with the flag --github. The project will follow SSB's best practice for development.</p> <p>Usage:</p> <pre><code> create [OPTIONS] PROJECT_NAME [DESCRIPTION] [REPO_PRIVACY]:[internal|private|public]\n</code></pre> <p>Options:</p> <pre><code>  PROJECT_NAME                    Project name  \\[required]\n  [DESCRIPTION]                   A short description of your project\n  [REPO_PRIVACY]:[internal|private|public]\n                                  Visibility of the Github repo  \\[default:\n                                  internal]\n  --github                        Create the repo on Github as well\n  --github-token TEXT             Your Github Personal Access Token, follow\n                                  these instructions to create one:\n                                  https://manual.dapla.ssb.no/git-\n                                  github.html#personal-access-token-pat\n  --no-verify                     Disable verification of git configuration\n                                  files.\n  --template-git-url TEXT         The Cookiecutter template URI.  \\[default:\n                                  https://github.com/statisticsnorway/ssb-\n                                  project-template-stat]\n  --checkout TEXT                 The git reference to check against. Supports\n                                  branches, tags and commit hashes.\n  --name TEXT                     Project author's full name.\n  --email TEXT                    Project author's email.\n  --no-kernel                     Do not create a kernel after the project is\n                                  created (defaults to False).\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>ssb_project_cli<ul> <li>ssb_project<ul> <li>app</li> <li>build<ul> <li>build</li> <li>environment</li> <li>poetry</li> <li>prompt</li> <li>temp_template_repo</li> </ul> </li> <li>clean<ul> <li>clean</li> </ul> </li> <li>create<ul> <li>create</li> <li>github</li> <li>local_repo</li> <li>prompt</li> <li>repo_privacy</li> <li>temp_git_repo</li> </ul> </li> <li>settings</li> <li>util</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/ssb_project_cli/","title":"ssb_project_cli","text":"<p>SSB Project CLI.</p>"},{"location":"reference/ssb_project_cli/ssb_project/","title":"ssb_project","text":"<p>ssb-project package.</p>"},{"location":"reference/ssb_project_cli/ssb_project/app/","title":"app","text":"<p>Command-line-interface for project-operations in dapla-jupterlab.</p>"},{"location":"reference/ssb_project_cli/ssb_project/app/#ssb_project_cli.ssb_project.app.build","title":"<code>build(path=typer.Argument(None, help='Project path'), no_verify=False, no_kernel=False)</code>","text":"<p>:wrench:  Create a virtual environment and corresponding Jupyter kernel. Runs in the current folder if no arguments are supplied.</p> Source code in <code>ssb_project_cli/ssb_project/app.py</code> <pre><code>@app.command()\ndef build(\n    path: t.Optional[Path] = typer.Argument(  # noqa: B008\n        None,\n        help=\"Project path\",\n    ),\n    no_verify: Annotated[\n        bool,\n        typer.Option(\n            \"--no-verify\",\n            help=\"Disable verification of git configuration files.\",\n        ),\n    ] = False,\n    no_kernel: Annotated[\n        bool,\n        typer.Option(\n            \"--no-kernel\",\n            help=\"Do not install a kernel after the project is built (defaults to False).\",\n        ),\n    ] = False,\n) -&gt; None:\n    \"\"\":wrench:  Create a virtual environment and corresponding Jupyter kernel. Runs in the current folder if no arguments are supplied.\"\"\"\n    build_project(\n        path,\n        CURRENT_WORKING_DIRECTORY,\n        STAT_TEMPLATE_REPO_URL,\n        STAT_TEMPLATE_DEFAULT_REFERENCE,\n        not no_verify,\n        handle_no_kernel_argument(no_kernel),\n    )\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/app/#ssb_project_cli.ssb_project.app.clean","title":"<code>clean(project_name=typer.Argument(..., help='The name of the project/kernel you want to delete.'))</code>","text":"<p>:broom:  Delete the kernel for the given project name.</p> Source code in <code>ssb_project_cli/ssb_project/app.py</code> <pre><code>@app.command()\ndef clean(\n    project_name: str = typer.Argument(  # noqa: B008\n        ..., help=\"The name of the project/kernel you want to delete.\"\n    ),\n) -&gt; None:\n    \"\"\":broom:  Delete the kernel for the given project name.\"\"\"\n    clean_project(project_name)\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/app/#ssb_project_cli.ssb_project.app.create","title":"<code>create(project_name=typer.Argument(..., help='Project name'), description=typer.Argument('', help='A short description of your project'), repo_privacy=typer.Argument(RepoPrivacy.internal, help='Visibility of the Github repo'), add_github=False, github_token='', no_verify=False, template_git_url=STAT_TEMPLATE_REPO_URL, checkout=None, name=None, email=None, no_kernel=False)</code>","text":"<p>:sparkles:  Create a project locally, and optionally on GitHub with the flag --github. The project will follow SSB's best practice for development.</p> Source code in <code>ssb_project_cli/ssb_project/app.py</code> <pre><code>@app.command()\ndef create(  # noqa: C901, S107\n    project_name: str = typer.Argument(..., help=\"Project name\"),  # noqa: B008\n    description: str = typer.Argument(  # noqa: B008\n        \"\", help=\"A short description of your project\"\n    ),\n    repo_privacy: RepoPrivacy = typer.Argument(  # noqa: B008\n        RepoPrivacy.internal, help=\"Visibility of the Github repo\"\n    ),\n    add_github: Annotated[\n        bool, typer.Option(\"--github\", help=\"Create the repo on Github as well\")\n    ] = False,\n    github_token: Annotated[\n        str,\n        typer.Option(\n            help=\"Your Github Personal Access Token, follow these instructions to create one: https://manual.dapla.ssb.no/git-github.html#personal-access-token-pat\"\n        ),\n    ] = \"\",\n    no_verify: Annotated[\n        bool,\n        typer.Option(\n            \"--no-verify\",\n            help=\"Disable verification of git configuration files.\",\n        ),\n    ] = False,\n    template_git_url: Annotated[\n        str, typer.Option(help=\"The Cookiecutter template URI.\")\n    ] = STAT_TEMPLATE_REPO_URL,\n    checkout: Annotated[\n        t.Optional[str],\n        typer.Option(\n            help=\"The git reference to check against. Supports branches, tags and commit hashes.\",\n        ),\n    ] = None,\n    name: Annotated[\n        t.Optional[str], typer.Option(\"--name\", help=\"Project author's full name.\")\n    ] = None,\n    email: Annotated[\n        t.Optional[str], typer.Option(\"--email\", help=\"Project author's email.\")\n    ] = None,\n    no_kernel: Annotated[\n        bool,\n        typer.Option(\n            \"--no-kernel\",\n            help=\"Do not create a kernel after the project is created (defaults to False).\",\n        ),\n    ] = False,\n) -&gt; None:\n    \"\"\":sparkles:  Create a project locally, and optionally on GitHub with the flag --github. The project will follow SSB's best practice for development.\"\"\"\n    if not checkout and template_git_url is STAT_TEMPLATE_REPO_URL:\n        checkout = STAT_TEMPLATE_DEFAULT_REFERENCE\n\n    create_project(\n        project_name,\n        description,\n        repo_privacy,\n        add_github,\n        github_token,\n        CURRENT_WORKING_DIRECTORY,\n        HOME_PATH,\n        GITHUB_ORG_NAME,\n        template_git_url,\n        checkout,\n        name,\n        email,\n        not no_verify,\n        handle_no_kernel_argument(no_kernel),\n    )\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/app/#ssb_project_cli.ssb_project.app.main","title":"<code>main()</code>","text":"<p>Main function of ssb_project_cli.</p> Source code in <code>ssb_project_cli/ssb_project/app.py</code> <pre><code>def main() -&gt; None:\n    \"\"\"Main function of ssb_project_cli.\"\"\"\n    set_debug_logging()\n    app(prog_name=\"ssb-project\")  # pragma: no cover\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/settings/","title":"settings","text":"<p>Global settings for SSB-project-cli.</p>"},{"location":"reference/ssb_project_cli/ssb_project/util/","title":"util","text":"<p>SSB-project utils.</p>"},{"location":"reference/ssb_project_cli/ssb_project/util/#ssb_project_cli.ssb_project.util.Nothing","title":"<code>Nothing</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Option[T]</code></p> <p>An 'Option' type that doesn't contain a value.</p> Source code in <code>ssb_project_cli/ssb_project/util.py</code> <pre><code>@dataclass\nclass Nothing(Option[T]):\n    \"\"\"An 'Option' type that doesn't contain a value.\"\"\"\n\n    def get_or_else(self, default: U) -&gt; U:\n        \"\"\"Get value if it exists or return default.\"\"\"\n        return default\n\n    def map(self, func: Callable[[T], U]) -&gt; Option[U]:\n        \"\"\"Map function over value if it exists.\"\"\"\n        return Nothing()\n\n    def is_empty(self) -&gt; bool:\n        \"\"\"Check if the Option type contains a value.\"\"\"\n        return True\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/util/#ssb_project_cli.ssb_project.util.Nothing.get_or_else","title":"<code>get_or_else(default)</code>","text":"<p>Get value if it exists or return default.</p> Source code in <code>ssb_project_cli/ssb_project/util.py</code> <pre><code>def get_or_else(self, default: U) -&gt; U:\n    \"\"\"Get value if it exists or return default.\"\"\"\n    return default\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/util/#ssb_project_cli.ssb_project.util.Nothing.is_empty","title":"<code>is_empty()</code>","text":"<p>Check if the Option type contains a value.</p> Source code in <code>ssb_project_cli/ssb_project/util.py</code> <pre><code>def is_empty(self) -&gt; bool:\n    \"\"\"Check if the Option type contains a value.\"\"\"\n    return True\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/util/#ssb_project_cli.ssb_project.util.Nothing.map","title":"<code>map(func)</code>","text":"<p>Map function over value if it exists.</p> Source code in <code>ssb_project_cli/ssb_project/util.py</code> <pre><code>def map(self, func: Callable[[T], U]) -&gt; Option[U]:\n    \"\"\"Map function over value if it exists.\"\"\"\n    return Nothing()\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/util/#ssb_project_cli.ssb_project.util.Option","title":"<code>Option</code>","text":"<p>               Bases: <code>Generic[T]</code></p> <p>Represents a value that might be empty.</p> Source code in <code>ssb_project_cli/ssb_project/util.py</code> <pre><code>class Option(Generic[T]):\n    \"\"\"Represents a value that might be empty.\"\"\"\n\n    def get_or_else(self, default: U) -&gt; Union[T, U]:\n        \"\"\"Get value if it exists or return default.\"\"\"\n        raise NotImplementedError\n\n    def map(self, func: Callable[[T], U]) -&gt; \"Option[U]\":\n        \"\"\"Map function over value if it exists.\"\"\"\n        raise NotImplementedError\n\n    def is_empty(self) -&gt; bool:\n        \"\"\"Check if the Option type contains a value.\"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/util/#ssb_project_cli.ssb_project.util.Option.get_or_else","title":"<code>get_or_else(default)</code>","text":"<p>Get value if it exists or return default.</p> Source code in <code>ssb_project_cli/ssb_project/util.py</code> <pre><code>def get_or_else(self, default: U) -&gt; Union[T, U]:\n    \"\"\"Get value if it exists or return default.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/util/#ssb_project_cli.ssb_project.util.Option.is_empty","title":"<code>is_empty()</code>","text":"<p>Check if the Option type contains a value.</p> Source code in <code>ssb_project_cli/ssb_project/util.py</code> <pre><code>def is_empty(self) -&gt; bool:\n    \"\"\"Check if the Option type contains a value.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/util/#ssb_project_cli.ssb_project.util.Option.map","title":"<code>map(func)</code>","text":"<p>Map function over value if it exists.</p> Source code in <code>ssb_project_cli/ssb_project/util.py</code> <pre><code>def map(self, func: Callable[[T], U]) -&gt; \"Option[U]\":\n    \"\"\"Map function over value if it exists.\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/util/#ssb_project_cli.ssb_project.util.Some","title":"<code>Some</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Option[T]</code></p> <p>An 'Option' type that contains a value.</p> Source code in <code>ssb_project_cli/ssb_project/util.py</code> <pre><code>@dataclass\nclass Some(Option[T]):\n    \"\"\"An 'Option' type that contains a value.\"\"\"\n\n    value: T\n\n    def get_or_else(self, default: U) -&gt; T:\n        \"\"\"Get value if it exists or return default.\"\"\"\n        return self.value\n\n    def map(self, func: Callable[[T], U]) -&gt; Option[U]:\n        \"\"\"Map function over value if it exists.\"\"\"\n        return Some(func(self.value))\n\n    def is_empty(self) -&gt; bool:\n        \"\"\"Check if the Option type contains a value.\"\"\"\n        return False\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/util/#ssb_project_cli.ssb_project.util.Some.get_or_else","title":"<code>get_or_else(default)</code>","text":"<p>Get value if it exists or return default.</p> Source code in <code>ssb_project_cli/ssb_project/util.py</code> <pre><code>def get_or_else(self, default: U) -&gt; T:\n    \"\"\"Get value if it exists or return default.\"\"\"\n    return self.value\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/util/#ssb_project_cli.ssb_project.util.Some.is_empty","title":"<code>is_empty()</code>","text":"<p>Check if the Option type contains a value.</p> Source code in <code>ssb_project_cli/ssb_project/util.py</code> <pre><code>def is_empty(self) -&gt; bool:\n    \"\"\"Check if the Option type contains a value.\"\"\"\n    return False\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/util/#ssb_project_cli.ssb_project.util.Some.map","title":"<code>map(func)</code>","text":"<p>Map function over value if it exists.</p> Source code in <code>ssb_project_cli/ssb_project/util.py</code> <pre><code>def map(self, func: Callable[[T], U]) -&gt; Option[U]:\n    \"\"\"Map function over value if it exists.\"\"\"\n    return Some(func(self.value))\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/util/#ssb_project_cli.ssb_project.util.create_error_log","title":"<code>create_error_log(log, calling_function, home_path=HOME_PATH)</code>","text":"<p>Creates a file with log of error in the current folder.</p> <p>Parameters:</p> Name Type Description Default <code>log</code> <code>str</code> <p>The content of the error log.</p> required <code>calling_function</code> <code>str</code> <p>The function in which the error occurred. Used to give a more descriptive name to error log file.</p> required <code>home_path</code> <code>Path</code> <p>System home path</p> <code>HOME_PATH</code> Source code in <code>ssb_project_cli/ssb_project/util.py</code> <pre><code>def create_error_log(\n    log: str, calling_function: str, home_path: Path = HOME_PATH\n) -&gt; None:\n    \"\"\"Creates a file with log of error in the current folder.\n\n    Args:\n        log: The content of the error log.\n        calling_function: The function in which the error occurred. Used to give a more descriptive name to error log file.\n        home_path: System home path\n    \"\"\"\n    try:\n        error_logs_path = f\"{home_path}/ssb-project-cli/.error_logs\"\n        if not os.path.exists(error_logs_path):\n            os.makedirs(error_logs_path)\n        filename = f\"{calling_function}-error-{int(time.time())}.txt\"\n        with open(f\"{error_logs_path}/{filename}\", \"w+\") as f:\n            f.write(log)\n            print(\n                f\"Detailed error information can be viewed with the terminal command 'cat {error_logs_path}/{filename}'\"\n            )\n            print(\n                f\"You can find the full debug log here {error_logs_path}/ssb-project-debug.log\"\n            )\n            print(\n                f\"\u2757\ufe0fYou can try deleting '.poetry/cache' in your project directory or '{home_path}/.cache/pypoetry'. Cache could be causing problems\"\n            )\n    except Exception as e:\n        print(f\"Error while attempting to write the log file: {e}\")\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/util/#ssb_project_cli.ssb_project.util.execute_command","title":"<code>execute_command(command, command_shortname, success_desc=None, failure_desc=None, cwd=None)</code>","text":"<p>Execute command and handle failure/success cases.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>Union[str, list[str]]</code> <p>The command to be executed. For example \"poetry install\".</p> required <code>command_shortname</code> <code>str</code> <p>For example: \"poetry-install\". Used to create descriptive error log file.</p> required <code>success_desc</code> <code>Optional[str]</code> <p>For example: \"Poetry install ran successfully\".</p> <code>None</code> <code>failure_desc</code> <code>Optional[str]</code> <p>For example: \"Something went wrong while running poetry install\".</p> <code>None</code> <code>cwd</code> <code>Optional[Path]</code> <p>The current working directory.</p> <code>None</code> <p>Returns:</p> Type Description <code>CompletedProcess[bytes]</code> <p>The result of the subprocess.</p> Source code in <code>ssb_project_cli/ssb_project/util.py</code> <pre><code>def execute_command(\n    command: Union[str, list[str]],\n    command_shortname: str,\n    success_desc: Optional[str] = None,\n    failure_desc: Optional[str] = None,\n    cwd: Optional[Path] = None,\n) -&gt; subprocess.CompletedProcess[bytes]:\n    \"\"\"Execute command and handle failure/success cases.\n\n    Args:\n        command: The command to be executed. For example \"poetry install\".\n        command_shortname: For example: \"poetry-install\". Used to create descriptive error log file.\n        success_desc: For example: \"Poetry install ran successfully\".\n        failure_desc: For example: \"Something went wrong while running poetry install\".\n        cwd: The current working directory.\n\n    Returns:\n        The result of the subprocess.\n    \"\"\"\n    if isinstance(command, str):\n        command = command.split(\" \")\n    result = subprocess.run(  # noqa S603\n        command,\n        capture_output=True,\n        cwd=cwd,\n    )\n\n    if result.returncode != 0:\n        calling_function = command_shortname\n        log = str(result)\n        if failure_desc:\n            print(failure_desc)\n        else:\n            print(\"Error while running: \" + \" \".join(command))\n        create_error_log(log, calling_function)\n        sys.exit(1)\n    else:\n        if success_desc:\n            print(success_desc)\n\n    return result\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/util/#ssb_project_cli.ssb_project.util.get_kernels_dict","title":"<code>get_kernels_dict()</code>","text":"<p>Gets installed kernel specifications.</p> <p>Returns:</p> Name Type Description <code>kernel_dict</code> <code>dict[str, dict[str, str]]</code> <p>Dictionary of installed kernel specifications</p> Source code in <code>ssb_project_cli/ssb_project/util.py</code> <pre><code>def get_kernels_dict() -&gt; dict[str, dict[str, str]]:\n    \"\"\"Gets installed kernel specifications.\n\n    Returns:\n        kernel_dict: Dictionary of installed kernel specifications\n    \"\"\"\n    return kernelspec_manager.get_all_specs()\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/util/#ssb_project_cli.ssb_project.util.get_project_name_and_root_path","title":"<code>get_project_name_and_root_path(project_path=None)</code>","text":"<p>Get the name and root of the project.</p> <ul> <li>First source: <code>.cruft.json</code></li> <li>Second source: <code>pyproject.toml</code></li> <li>Final fallback: project root directory name.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>project_path</code> <code>Path | None</code> <p>Optionally supply a path to the project. If not supplied, use the current working directory.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>project_name</code> <code>str | None</code> <p>The name of the project.</p> <code>project_root</code> <code>Path | None</code> <p>Path of the root directory of the project.</p> Source code in <code>ssb_project_cli/ssb_project/util.py</code> <pre><code>def get_project_name_and_root_path(\n    project_path: Path | None = None,\n) -&gt; tuple[str | None, Path | None]:\n    \"\"\"Get the name and root of the project.\n\n    - First source: `.cruft.json`\n    - Second source: `pyproject.toml`\n    - Final fallback: project root directory name.\n\n    Args:\n        project_path: Optionally supply a path to the project. If not supplied, use the current working directory.\n\n    Returns:\n        project_name: The name of the project.\n        project_root: Path of the root directory of the project.\n    \"\"\"\n    cruft_json_name = \".cruft.json\"\n    pyproject_name = \"pyproject.toml\"\n    origin = project_path or Path.cwd()\n    if not origin.exists():\n        return None, None\n    paths = [origin]\n    # List of current path and all parents up to the filesystem root\n    paths.extend(origin.parents)\n\n    for path in paths:\n        if {i.name for i in path.iterdir()}.intersection(\n            {cruft_json_name, pyproject_name, \".git\"}\n        ):\n            try:\n                # Attempt to source from Cruft first\n                name = json.loads((path / cruft_json_name).read_text())[\"context\"][\n                    \"cookiecutter\"\n                ][\"project_name\"]\n                return (\n                    name,\n                    path,\n                )\n            except (KeyError, FileNotFoundError, json.JSONDecodeError):\n                # Fall back to pyproject.toml\n                try:\n                    name = tomli.loads((path / pyproject_name).read_text())[\"tool\"][\n                        \"poetry\"\n                    ][\"name\"]\n                    return (\n                        name,\n                        path,\n                    )\n                except (KeyError, FileNotFoundError):\n                    # Final fall back to project root directory name\n                    return path.name, path\n    return None, None\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/util/#ssb_project_cli.ssb_project.util.handle_no_kernel_argument","title":"<code>handle_no_kernel_argument(no_kernel)</code>","text":"<p>Handle the 'no_kernel' parameter and environment variable.</p> <p>The CLI flag is always prioritised, otherwise it falls back to the environment variable and then lastly defaults to False.</p> Source code in <code>ssb_project_cli/ssb_project/util.py</code> <pre><code>def handle_no_kernel_argument(no_kernel: bool) -&gt; bool:\n    \"\"\"Handle the 'no_kernel' parameter and environment variable.\n\n    The CLI flag is always prioritised, otherwise it falls back to the environment\n    variable and then lastly defaults to False.\n    \"\"\"\n    if no_kernel:\n        return no_kernel\n    env_var_no_kernel = os.environ.get(\"NO_KERNEL\")\n    if env_var_no_kernel is None:  # handle NO_KERNEL is undefined case\n        return False\n    elif env_var_no_kernel not in [\"True\", \"False\"]:\n        print(\n            f\"\"\"\n              The value of the 'NO_KERNEL' environment variable is {os.environ[\"NO_KERNEL\"]}.\n              The only valid values are True and False.\n            \"\"\"\n        )\n        exit(1)\n    else:\n        return bool(env_var_no_kernel)\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/util/#ssb_project_cli.ssb_project.util.remove_kernel_spec","title":"<code>remove_kernel_spec(kernel_name)</code>","text":"<p>Remove a kernel spec.</p> Source code in <code>ssb_project_cli/ssb_project/util.py</code> <pre><code>def remove_kernel_spec(kernel_name: str) -&gt; None:\n    \"\"\"Remove a kernel spec.\"\"\"\n    kernelspec_manager.remove_kernel_spec(kernel_name)\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/util/#ssb_project_cli.ssb_project.util.set_debug_logging","title":"<code>set_debug_logging(home_path=HOME_PATH)</code>","text":"<p>Creates a file with log of error in the current folder.</p> <p>Parameters:</p> Name Type Description Default <code>home_path</code> <code>Path</code> <p>path prefix to use for error logging, defaults to HOME_PATH.</p> <code>HOME_PATH</code> Source code in <code>ssb_project_cli/ssb_project/util.py</code> <pre><code>def set_debug_logging(home_path: Path = HOME_PATH) -&gt; None:\n    \"\"\"Creates a file with log of error in the current folder.\n\n    Args:\n        home_path: path prefix to use for error logging, defaults to HOME_PATH.\n    \"\"\"\n    error_logs_path = f\"{home_path}/ssb-project-cli/.error_logs/ssb-project-debug.log\"\n    log_dir = os.path.dirname(error_logs_path)\n    if not os.path.exists(log_dir):\n        os.makedirs(log_dir)\n    logging.basicConfig(filename=error_logs_path, level=logging.DEBUG)\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/util/#ssb_project_cli.ssb_project.util.try_if_file_exists","title":"<code>try_if_file_exists(f)</code>","text":"<p>Convert a function that may throw a 'FileExistsError' into an Option value that returns None if an error is thrown.</p> Source code in <code>ssb_project_cli/ssb_project/util.py</code> <pre><code>def try_if_file_exists(f: Callable[[], U]) -&gt; Option[U]:\n    \"\"\"Convert a function that may throw a 'FileExistsError' into an Option value that returns None if an error is thrown.\"\"\"\n    try:\n        return Some(value=f())\n    except FileExistsError:\n        return Nothing()\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/build/","title":"build","text":"<p>Build command package.</p>"},{"location":"reference/ssb_project_cli/ssb_project/build/build/","title":"build","text":"<p>Build command module.</p>"},{"location":"reference/ssb_project_cli/ssb_project/build/build/#ssb_project_cli.ssb_project.build.build.build_project","title":"<code>build_project(path, working_directory, template_repo_url, checkout, verify_config=True, no_kernel=False)</code>","text":"<p>Installs dependencies and kernel for a given project.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path | None</code> <p>Path to project</p> required <code>working_directory</code> <code>Path</code> <p>working directory</p> required <code>template_repo_url</code> <code>str</code> <p>Template repository url</p> required <code>checkout</code> <code>str | None</code> <p>The git reference to check against. Supports branches, tags and commit hashes.</p> required <code>verify_config</code> <code>bool</code> <p>Determines if gitconfig is verified.</p> <code>True</code> <code>no_kernel</code> <code>bool</code> <p>Determines if a kernel shall be generated or not.</p> <code>False</code> Source code in <code>ssb_project_cli/ssb_project/build/build.py</code> <pre><code>def build_project(\n    path: Path | None,\n    working_directory: Path,\n    template_repo_url: str,\n    checkout: str | None,\n    verify_config: bool = True,\n    no_kernel: bool = False,\n) -&gt; None:\n    \"\"\"Installs dependencies and kernel for a given project.\n\n    Args:\n        path: Path to project\n        working_directory: working directory\n        template_repo_url: Template repository url\n        checkout: The git reference to check against. Supports branches, tags and commit hashes.\n        verify_config: Determines if gitconfig is verified.\n        no_kernel: Determines if a kernel shall be generated or not.\n    \"\"\"\n    if path is None:\n        project_directory = working_directory\n    else:\n        project_directory = working_directory / path\n\n    project_name, project_root = get_project_name_and_root_path(project_directory)\n\n    if project_name is None or project_root is None:\n        print(\n            \":x:\\tCould not find project root. Please run ssb-project within a project directory.\"\n        )\n        sys.exit()\n\n    if verify_config:\n        validate_and_fix_git_config(\n            template_repo_url, checkout, project_name, project_root\n        )\n\n    check_and_remove_onprem_source(project_root)\n\n    poetry_install(project_root)\n    if not no_kernel:\n        install_ipykernel(project_root, project_name)\n        ipykernel_attach_bashrc(project_name)\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/build/build/#ssb_project_cli.ssb_project.build.build.ipykernel_attach_bashrc","title":"<code>ipykernel_attach_bashrc(project_name)</code>","text":"<p>Attaches bashrc to the project kernel by modifying ipykernel files.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>path to the kernel directory</p> required Source code in <code>ssb_project_cli/ssb_project/build/build.py</code> <pre><code>def ipykernel_attach_bashrc(project_name: str) -&gt; None:\n    \"\"\"Attaches bashrc to the project kernel by modifying ipykernel files.\n\n    Args:\n        project_name: path to the kernel directory\n    \"\"\"\n    kernels = get_kernels_dict()\n    if project_name not in kernels:\n        print(\n            f\":x:\\tCould not mount .bashrc, '{project_name}' kernel was not found'.\"  # noqa: B907\n        )\n        sys.exit(1)\n\n    project_kernel_path = kernels[project_name][\"resource_dir\"]\n    if not Path(project_kernel_path).exists():\n        print(\n            f\":x:\\tCould not mount .bashrc, path: '{project_kernel_path}' does not exist.\"  # noqa: B907\n        )\n        sys.exit(1)\n\n    kernel_json_file = f\"{project_kernel_path}/kernel.json\"\n    if not Path(kernel_json_file).exists():\n        print(\n            f\":x:\\tCould not mount .bashrc, file: '{kernel_json_file}' does not exist.\"  # noqa: B907\n        )\n        sys.exit(1)\n\n    with open(kernel_json_file, encoding=\"utf-8\") as f:\n        content_as_json = json.loads(f.read())\n\n    python_executable_path = _get_python_executable_path(content_as_json[\"argv\"])\n    if python_executable_path is None:\n        print(\n            f\":x:\\tCould not mount .bashrc, cannot find python executable path in {kernel_json_file}\"\n        )  # noqa: B907\n        sys.exit(1)\n\n    if python_executable_path.endswith(\"/python.sh\"):\n        print(\n            \":warning:\\t.bashrc should already been mounted in your kernel, if you are in doubt do a 'clean' followed by a 'build'\"\n        )  # noqa: B907\n        sys.exit(0)\n\n    start_script_path = f\"{project_kernel_path}/python.sh\"\n    content_as_json[\"argv\"] = [\n        start_script_path,\n        \"-m\",\n        \"ipykernel_launcher\",\n        \"-f\",\n        \"{connection_file}\",\n    ]\n\n    with open(kernel_json_file, \"w\", encoding=\"utf-8\") as f:\n        f.write(json.dumps(content_as_json))\n\n    _write_start_script(start_script_path, python_executable_path)\n\n    # set rx to everyone, required for jupyterlab to get permission to call start script\n    os.chmod(start_script_path, 0o555)  # noqa: S103\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/build/build/#ssb_project_cli.ssb_project.build.build.validate_and_fix_git_config","title":"<code>validate_and_fix_git_config(template_repo_url, checkout, project_name, project_root)</code>","text":"<p>Validate and fix the git config.</p> <p>Parameters:</p> Name Type Description Default <code>template_repo_url</code> <code>str</code> <p>Template repository url</p> required <code>checkout</code> <code>str | None</code> <p>The git reference to check against. Supports branches, tags and commit hashes.</p> required <code>project_name</code> <code>str</code> <p>The name of the project</p> required <code>project_root</code> <code>Path</code> <p>The root directory of the project/repo.</p> required Source code in <code>ssb_project_cli/ssb_project/build/build.py</code> <pre><code>def validate_and_fix_git_config(\n    template_repo_url: str, checkout: str | None, project_name: str, project_root: Path\n) -&gt; None:\n    \"\"\"Validate and fix the git config.\n\n    Args:\n        template_repo_url: Template repository url\n        checkout: The git reference to check against. Supports branches, tags and commit hashes.\n        project_name: The name of the project\n        project_root: The root directory of the project/repo.\n    \"\"\"\n    valid_global_git_config: bool = try_if_file_exists(\n        lambda: kvakk_git_tools.validate_git_config()\n    ).get_or_else(False)\n    valid_project_git_files: bool = try_if_file_exists(\n        lambda: kvakk_git_tools.validate_local_git_files(cwd=Path(str(project_root)))\n    ).get_or_else(False)\n\n    if not (valid_global_git_config and valid_project_git_files):\n\n        print(\n            f\"\"\"\n            :x:    Your project's Git configuration does not follow SSB recommendations,\n            :x:    which may result in sensitive data being pushed to GitHub.\n\n                Git file validation status:\n            {\":white_check_mark:\" if valid_global_git_config else \":x:\"}      - Global .gitconfig file\n            {\":white_check_mark:\" if valid_project_git_files else \":x:\"}      - Project .gitignore and .gitattributes files\n            \"\"\"\n        )\n        confirm_fix_ssb_git_config(\n            project_name,\n            template_repo_url,\n            checkout,\n            project_root,\n            valid_global_git_config,\n            valid_project_git_files,\n        )\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/build/environment/","title":"environment","text":"<p>This module reads in environment variables.</p>"},{"location":"reference/ssb_project_cli/ssb_project/build/environment/#ssb_project_cli.ssb_project.build.environment.reset_global_gitconfig","title":"<code>reset_global_gitconfig()</code>","text":"<p>Reset the global gitconfig using 'kvakk-git-tools' module.</p> <p>This function attempts to configure the global gitconfig using the 'kvakk-git-tools' module. If the configuration fails, an error message is printed indicating the platform's support status.</p> Source code in <code>ssb_project_cli/ssb_project/build/environment.py</code> <pre><code>def reset_global_gitconfig() -&gt; None:\n    \"\"\"Reset the global gitconfig using 'kvakk-git-tools' module.\n\n    This function attempts to configure the global gitconfig using the 'kvakk-git-tools' module.\n    If the configuration fails, an error message is printed indicating the platform's support status.\n    \"\"\"\n    print(\"\\nConfiguring git with 'kvakk-git-tools':\")\n\n    try:\n        ssb_gitconfig.main(test=False)\n    except SystemExit:\n        platform = ssb_gitconfig.Platform()\n        is_supported_bools = (\"is\", \"is not\")\n        print(\n            f\"\\n:x:\\tYour global gitconfig was not fixed, your platform {is_supported_bools[platform.is_unsupported()]} supported.\"\n        )\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/build/environment/#ssb_project_cli.ssb_project.build.environment.running_onprem","title":"<code>running_onprem(image_spec)</code>","text":"<p>Are we running in Jupyter on-prem?</p> <p>Parameters:</p> Name Type Description Default <code>image_spec</code> <code>str</code> <p>Value of the JUPYTER_IMAGE_SPEC environment variable</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if running on-prem, else False.</p> Source code in <code>ssb_project_cli/ssb_project/build/environment.py</code> <pre><code>def running_onprem(image_spec: str) -&gt; bool:\n    \"\"\"Are we running in Jupyter on-prem?\n\n    Args:\n        image_spec: Value of the JUPYTER_IMAGE_SPEC environment variable\n\n    Returns:\n        True if running on-prem, else False.\n    \"\"\"\n    return \"onprem\" in image_spec\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/build/poetry/","title":"poetry","text":"<p>This module contains functions used to install poetry dependecies and kernels.</p>"},{"location":"reference/ssb_project_cli/ssb_project/build/poetry/#ssb_project_cli.ssb_project.build.poetry.check_and_remove_onprem_source","title":"<code>check_and_remove_onprem_source(project_root)</code>","text":"<p>Check if running onprem and fix source in pyproject.toml if so.</p> <p>Parameters:</p> Name Type Description Default <code>project_root</code> <code>Path</code> <p>Path to the root of the project</p> required Source code in <code>ssb_project_cli/ssb_project/build/poetry.py</code> <pre><code>def check_and_remove_onprem_source(project_root: Path) -&gt; None:\n    \"\"\"Check if running onprem and fix source in pyproject.toml if so.\n\n    Args:\n        project_root: Path to the root of the project\n    \"\"\"\n    if poetry_source_includes_source_name(project_root):\n        if running_onprem(JUPYTER_IMAGE_SPEC):\n            print(\n                \":twisted_rightwards_arrows:\\tRemoving proxy, it is no longer needed onprem\"\n            )\n        poetry_source_remove(project_root)\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/build/poetry/#ssb_project_cli.ssb_project.build.poetry.install_ipykernel","title":"<code>install_ipykernel(project_directory, project_name)</code>","text":"<p>Installs ipykernel.</p> <p>Parameters:</p> Name Type Description Default <code>project_directory</code> <code>Path</code> <p>Path of project</p> required <code>project_name</code> <code>str</code> <p>Name of project</p> required Source code in <code>ssb_project_cli/ssb_project/build/poetry.py</code> <pre><code>def install_ipykernel(project_directory: Path, project_name: str) -&gt; None:\n    \"\"\"Installs ipykernel.\n\n    Args:\n        project_directory: Path of project\n        project_name: Name of project\n    \"\"\"\n    with Progress(\n        SpinnerColumn(),\n        TextColumn(\"[progress.description]{task.description}\"),\n        transient=True,\n    ) as progress:\n        progress.add_task(description=\"Installing Jupyter kernel...\", total=None)\n        kernel_cmd = f\"poetry run python3 -m ipykernel install --user --name {project_name}\".split(\n            \" \"\n        )\n\n        execute_command(\n            kernel_cmd,\n            \"install-ipykernel\",\n            f\":white_check_mark:\\tInstalled Jupyter Kernel ({project_name})\",\n            \"Something went wrong while installing ipykernel.\",\n            project_directory,\n        )\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/build/poetry/#ssb_project_cli.ssb_project.build.poetry.poetry_install","title":"<code>poetry_install(project_directory)</code>","text":"<p>Call poetry install in project_directory.</p> <p>Parameters:</p> Name Type Description Default <code>project_directory</code> <code>Path</code> <p>Path of project</p> required Source code in <code>ssb_project_cli/ssb_project/build/poetry.py</code> <pre><code>def poetry_install(project_directory: Path) -&gt; None:\n    \"\"\"Call poetry install in project_directory.\n\n    Args:\n        project_directory: Path of project\n    \"\"\"\n    with Progress(\n        SpinnerColumn(),\n        TextColumn(\"[progress.description]{task.description}\"),\n        transient=True,\n    ) as progress:\n        progress.add_task(\n            description=\"Installing dependencies... This may take a few minutes\",\n            total=None,\n        )\n\n        execute_command(\n            \"poetry install\".split(\" \"),\n            \"poetry-install\",\n            \":white_check_mark:\\tInstalled dependencies in the virtual environment\",\n            \"Error: Something went wrong when installing packages with Poetry.\",\n            project_directory,\n        )\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/build/poetry/#ssb_project_cli.ssb_project.build.poetry.poetry_source_add","title":"<code>poetry_source_add(source_url, cwd, source_name=NEXUS_SOURCE_NAME)</code>","text":"<p>Add a package installation source for this project.</p> <p>Parameters:</p> Name Type Description Default <code>source_url</code> <code>str</code> <p>URL of 'simple' package API of package server</p> required <code>cwd</code> <code>Path</code> <p>Path of project to add source to</p> required <code>source_name</code> <code>str</code> <p>Name of source to add</p> <code>NEXUS_SOURCE_NAME</code> Source code in <code>ssb_project_cli/ssb_project/build/poetry.py</code> <pre><code>def poetry_source_add(\n    source_url: str, cwd: Path, source_name: str = NEXUS_SOURCE_NAME\n) -&gt; None:\n    \"\"\"Add a package installation source for this project.\n\n    Args:\n        source_url: URL of 'simple' package API of package server\n        cwd: Path of project to add source to\n        source_name: Name of source to add\n    \"\"\"\n    print(\"Adding package installation source for poetry...\")\n    execute_command(\n        f\"poetry source add --priority=primary {source_name} {source_url}\".split(\" \"),\n        \"poetry-source-add\",\n        \"Poetry source successfully added!\",\n        \"Failed to add poetry source.\",\n        cwd=cwd,\n    )\n\n    # If the lock is created off-prem, we need to refresh the lock.\n    if should_update_lock_file(source_url, cwd):\n        update_lock(cwd)\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/build/poetry/#ssb_project_cli.ssb_project.build.poetry.poetry_source_includes_source_name","title":"<code>poetry_source_includes_source_name(cwd, source_name=NEXUS_SOURCE_NAME)</code>","text":"<p>Check whether this source is already added to the project.</p> <p>Parameters:</p> Name Type Description Default <code>cwd</code> <code>Path</code> <p>Path of project to add source to</p> required <code>source_name</code> <code>str</code> <p>Name of source to check</p> <code>NEXUS_SOURCE_NAME</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if the source exists in the list</p> Source code in <code>ssb_project_cli/ssb_project/build/poetry.py</code> <pre><code>def poetry_source_includes_source_name(\n    cwd: Path, source_name: str = NEXUS_SOURCE_NAME\n) -&gt; bool:\n    \"\"\"Check whether this source is already added to the project.\n\n    Args:\n        cwd: Path of project to add source to\n        source_name: Name of source to check\n\n    Returns:\n        True if the source exists in the list\n    \"\"\"\n    result = execute_command(\n        \"poetry source show\".split(\" \"),\n        \"poetry-source-show\",\n        \"\",\n        \"Error showing Poetry source.\",\n        cwd=cwd,\n    )\n\n    return source_name in result.stdout.decode(\"utf-8\")\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/build/poetry/#ssb_project_cli.ssb_project.build.poetry.poetry_source_remove","title":"<code>poetry_source_remove(cwd, lock_update=True, source_name=NEXUS_SOURCE_NAME)</code>","text":"<p>Remove a package installation source for this project.</p> <p>Parameters:</p> Name Type Description Default <code>cwd</code> <code>Path</code> <p>Path of project to add source to</p> required <code>lock_update</code> <code>bool</code> <p>Bool used to decide whether to run update_lock</p> <code>True</code> <code>source_name</code> <code>str</code> <p>Name of source to be removed</p> <code>NEXUS_SOURCE_NAME</code> Source code in <code>ssb_project_cli/ssb_project/build/poetry.py</code> <pre><code>def poetry_source_remove(\n    cwd: Path, lock_update: bool = True, source_name: str = NEXUS_SOURCE_NAME\n) -&gt; None:\n    \"\"\"Remove a package installation source for this project.\n\n    Args:\n        cwd: Path of project to add source to\n        lock_update: Bool used to decide whether to run update_lock\n        source_name: Name of source to be removed\n    \"\"\"\n    print(\"Removing Poetry source...\")\n    execute_command(\n        f\"poetry source remove {source_name}\".split(\" \"),\n        \"source-remove\",\n        \"Poetry source successfully removed!\",\n        \"Failed to remove Poetry source.\",\n        cwd=cwd,\n    )\n    if lock_update:\n        update_lock(cwd)\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/build/poetry/#ssb_project_cli.ssb_project.build.poetry.poetry_update_lockfile_dependencies","title":"<code>poetry_update_lockfile_dependencies(project_directory)</code>","text":"<p>Call poetry update --lock in project_directory.</p> <p>Update the lock file dependencies without installing packages.</p> <p>Parameters:</p> Name Type Description Default <code>project_directory</code> <code>Path</code> <p>Path of project</p> required Source code in <code>ssb_project_cli/ssb_project/build/poetry.py</code> <pre><code>def poetry_update_lockfile_dependencies(project_directory: Path) -&gt; None:\n    \"\"\"Call poetry update --lock in project_directory.\n\n    Update the lock file dependencies without installing packages.\n\n    Args:\n        project_directory: Path of project\n    \"\"\"\n    with Progress(\n        SpinnerColumn(),\n        TextColumn(\"[progress.description]{task.description}\"),\n        transient=True,\n    ) as progress:\n        progress.add_task(\n            description=\"Updating lock file dependencies... This may take some time.\",\n            total=None,\n        )\n\n        execute_command(\n            \"poetry update --lock\".split(\" \"),\n            \"poetry-update-lock-deps\",\n            \":white_check_mark:\\tUpdated lock file dependencies\",\n            \"Error: Something went wrong when updating lock file dependencies with Poetry.\",\n            project_directory,\n        )\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/build/poetry/#ssb_project_cli.ssb_project.build.poetry.should_update_lock_file","title":"<code>should_update_lock_file(source_url, cwd)</code>","text":"<p>Checks if poetry.lock exists and if nexus source is set there.</p> <p>Parameters:</p> Name Type Description Default <code>source_url</code> <code>str</code> <p>URL of 'simple' package API of package server</p> required <code>cwd</code> <code>Path</code> <p>Path of project to add source to</p> required <p>Returns:     True if source url is not set in lock file, else False.</p> Source code in <code>ssb_project_cli/ssb_project/build/poetry.py</code> <pre><code>def should_update_lock_file(source_url: str, cwd: Path) -&gt; bool:\n    \"\"\"Checks if poetry.lock exists and if nexus source is set there.\n\n    Args:\n        source_url: URL of 'simple' package API of package server\n        cwd: Path of project to add source to\n    Returns:\n        True if source url is not set in lock file, else False.\n    \"\"\"\n    lock_file_path = cwd / Path(\"poetry.lock\")\n    if os.path.isfile(lock_file_path):\n        with open(lock_file_path) as lock_file:\n            if source_url in lock_file.read():\n                return False\n    else:\n        return False\n\n    return True\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/build/poetry/#ssb_project_cli.ssb_project.build.poetry.update_lock","title":"<code>update_lock(cwd)</code>","text":"<p>Runs poetry lock command in CWD.</p> <p>Parameters:</p> Name Type Description Default <code>cwd</code> <code>Path</code> <p>Path of project to add source to.</p> required Source code in <code>ssb_project_cli/ssb_project/build/poetry.py</code> <pre><code>def update_lock(cwd: Path) -&gt; None:\n    \"\"\"Runs poetry lock command in CWD.\n\n    Args:\n        cwd: Path of project to add source to.\n    \"\"\"\n    print(\"Refreshing lock file...\")\n    execute_command(\n        \"poetry lock\".split(\" \"),\n        \"update_lock\",\n        \"Poetry successfully refreshed lock file!\",\n        \"Poetry failed to refresh lock file.\",\n        cwd=cwd,\n    )\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/build/prompt/","title":"prompt","text":"<p>This module contains prompts used when building a ssb-project.</p>"},{"location":"reference/ssb_project_cli/ssb_project/build/prompt/#ssb_project_cli.ssb_project.build.prompt.confirm_fix_ssb_git_config","title":"<code>confirm_fix_ssb_git_config(project_name, template_repo_url, checkout, project_directory, valid_global_git_config, valid_project_git_config)</code>","text":"<p>Prompts user for conformation regarding reset of git configuration files.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>Name of project</p> required <code>template_repo_url</code> <code>str</code> <p>URL for the chosen template</p> required <code>checkout</code> <code>str | None</code> <p>The git reference to check against. Supports branches, tags and commit hashes.</p> required <code>project_directory</code> <code>Path</code> <p>Directory of the project.</p> required <code>valid_global_git_config</code> <code>bool</code> <p>True if global git is configured according to company policy.</p> required <code>valid_project_git_config</code> <code>bool</code> <p>True if local git files are configured according to company policy.</p> required Source code in <code>ssb_project_cli/ssb_project/build/prompt.py</code> <pre><code>def confirm_fix_ssb_git_config(\n    project_name: str,\n    template_repo_url: str,\n    checkout: str | None,\n    project_directory: Path,\n    valid_global_git_config: bool,\n    valid_project_git_config: bool,\n) -&gt; None:\n    \"\"\"Prompts user for conformation regarding reset of git configuration files.\n\n    Args:\n        project_name: Name of project\n        template_repo_url: URL for the chosen template\n        checkout: The git reference to check against. Supports branches, tags and commit hashes.\n        project_directory: Directory of the project.\n        valid_global_git_config: True if global git is configured according to company policy.\n        valid_project_git_config:True if local git files are configured according to company policy.\n    \"\"\"\n    valid_global_git_config_tuple = (\".gitconfig\", \"\")\n    valid_project_git_config_tuple = (\".gitattributes and .gitignore\", \"\")\n    changed_files = f\"{valid_global_git_config_tuple[valid_global_git_config]} {valid_project_git_config_tuple[valid_project_git_config]}\"\n\n    # Default is set to None makes typer repeat until input y/n is given.\n    if typer.confirm(\n        f\"\\n\\tWould you like to reset your Git configuration to the SSB recommended defaults?\\n\\tThis action will override changes you have made to: {changed_files}\",\n        default=None,\n    ):\n        print()  # Formatting print\n        if not valid_global_git_config:\n            reset_global_gitconfig()\n        if not valid_project_git_config:\n            reset_project_git_configuration(\n                project_name, template_repo_url, checkout, project_directory\n            )\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/build/temp_template_repo/","title":"temp_template_repo","text":"<p>This module provides the TempTemplateRepo context manager, which can be used to clone a Git repository to a temporary directory and checkout a specific tag.</p>"},{"location":"reference/ssb_project_cli/ssb_project/build/temp_template_repo/#ssb_project_cli.ssb_project.build.temp_template_repo.TempTemplateRepo","title":"<code>TempTemplateRepo</code>","text":"<p>A context manager that clones a Git repository to a temporary directory and checks out a specific tag.</p> Source code in <code>ssb_project_cli/ssb_project/build/temp_template_repo.py</code> <pre><code>class TempTemplateRepo:\n    \"\"\"A context manager that clones a Git repository to a temporary directory and checks out a specific tag.\"\"\"\n\n    def __init__(self, template_repo_url: str, checkout: str | None) -&gt; None:\n        \"\"\"Initializes a new TemplateRepo object with the specified template_repo_url and checkout attributes.\"\"\"\n        self.template_repo_url = template_repo_url\n        self.checkout = checkout\n\n    def __enter__(self) -&gt; \"TempTemplateRepo\":\n        \"\"\"Clones the template repository specified by template_repo_url to a temporary directory and checks out the tag specified by checkout.\"\"\"\n        self.temp_dir = TemporaryDirectory()\n\n        # clone the repository\n        self.repo = Repo.clone_from(self.template_repo_url, self.temp_dir.name)\n\n        if self.checkout:\n            # checkout the specific tag you're interested in\n            self.repo.git.checkout(self.checkout)\n\n        self.subdir = \"{{cookiecutter.project_name}}\"\n\n        return self\n\n    def __exit__(\n        self,\n        exc_type: Optional[Type[BaseException]],\n        exc_val: Optional[BaseException],\n        exc_tb: Optional[TracebackType],\n    ) -&gt; None:\n        \"\"\"Cleans up the temporary directory created containing the template repository.\"\"\"\n        self.temp_dir.cleanup()\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/build/temp_template_repo/#ssb_project_cli.ssb_project.build.temp_template_repo.TempTemplateRepo.__enter__","title":"<code>__enter__()</code>","text":"<p>Clones the template repository specified by template_repo_url to a temporary directory and checks out the tag specified by checkout.</p> Source code in <code>ssb_project_cli/ssb_project/build/temp_template_repo.py</code> <pre><code>def __enter__(self) -&gt; \"TempTemplateRepo\":\n    \"\"\"Clones the template repository specified by template_repo_url to a temporary directory and checks out the tag specified by checkout.\"\"\"\n    self.temp_dir = TemporaryDirectory()\n\n    # clone the repository\n    self.repo = Repo.clone_from(self.template_repo_url, self.temp_dir.name)\n\n    if self.checkout:\n        # checkout the specific tag you're interested in\n        self.repo.git.checkout(self.checkout)\n\n    self.subdir = \"{{cookiecutter.project_name}}\"\n\n    return self\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/build/temp_template_repo/#ssb_project_cli.ssb_project.build.temp_template_repo.TempTemplateRepo.__exit__","title":"<code>__exit__(exc_type, exc_val, exc_tb)</code>","text":"<p>Cleans up the temporary directory created containing the template repository.</p> Source code in <code>ssb_project_cli/ssb_project/build/temp_template_repo.py</code> <pre><code>def __exit__(\n    self,\n    exc_type: Optional[Type[BaseException]],\n    exc_val: Optional[BaseException],\n    exc_tb: Optional[TracebackType],\n) -&gt; None:\n    \"\"\"Cleans up the temporary directory created containing the template repository.\"\"\"\n    self.temp_dir.cleanup()\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/build/temp_template_repo/#ssb_project_cli.ssb_project.build.temp_template_repo.TempTemplateRepo.__init__","title":"<code>__init__(template_repo_url, checkout)</code>","text":"<p>Initializes a new TemplateRepo object with the specified template_repo_url and checkout attributes.</p> Source code in <code>ssb_project_cli/ssb_project/build/temp_template_repo.py</code> <pre><code>def __init__(self, template_repo_url: str, checkout: str | None) -&gt; None:\n    \"\"\"Initializes a new TemplateRepo object with the specified template_repo_url and checkout attributes.\"\"\"\n    self.template_repo_url = template_repo_url\n    self.checkout = checkout\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/clean/","title":"clean","text":"<p>Clean command package.</p>"},{"location":"reference/ssb_project_cli/ssb_project/clean/clean/","title":"clean","text":"<p>Clean command module.</p>"},{"location":"reference/ssb_project_cli/ssb_project/clean/clean/#ssb_project_cli.ssb_project.clean.clean.clean_project","title":"<code>clean_project(project_name)</code>","text":"<p>Removes the kernel and/or virtual environment of an SSB-project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>Project name</p> required Source code in <code>ssb_project_cli/ssb_project/clean/clean.py</code> <pre><code>def clean_project(project_name: str) -&gt; None:\n    \"\"\"Removes the kernel and/or virtual environment of an SSB-project.\n\n    Args:\n        project_name: Project name\n    \"\"\"\n    clean_venv()\n\n    kernels = get_kernels_dict()\n\n    if project_name not in kernels:\n        print(\n            \"Could not find kernel {!r}. Is the project name spelled correctly?\".format(\n                project_name\n            )\n        )\n\n        sys.exit(1)\n\n    confirmation = questionary.confirm(\n        \"Are you sure you want to delete the kernel {!r}. This action will delete the kernel associated with the virtual environment and leave all other files untouched.\".format(\n            project_name\n        )\n    ).ask()\n\n    if not confirmation:\n        sys.exit(1)\n\n    print(\n        f\"Deleting kernel {project_name}...If you wish to also delete the project files, you can do so manually.\"\n    )\n\n    remove_kernel_spec(project_name)\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/clean/clean/#ssb_project_cli.ssb_project.clean.clean.clean_venv","title":"<code>clean_venv()</code>","text":"<p>Removes the virtual environment for project if it exists in current directory. If not, user is prompted for path to ssb project.</p> Source code in <code>ssb_project_cli/ssb_project/clean/clean.py</code> <pre><code>def clean_venv() -&gt; None:\n    \"\"\"Removes the virtual environment for project if it exists in current directory. If not, user is prompted for path to ssb project.\"\"\"\n    confirm = questionary.confirm(\n        \"Do you also wish to delete the virtual environment for this project?\"\n    ).ask()\n    if confirm:\n        if Path(\".venv\").is_dir():\n            clean_venv_cmd = \"rm -rf .venv\"\n\n            execute_command(\n                clean_venv_cmd,\n                \"clean-virtualenv\",\n                \"Virtual environment successfully removed!\",\n                \"Something went wrong while removing virtual environment in current directory. A log of the issue was created...\",\n                None,\n            )\n\n        else:\n            print(\"No virtual environment found in current directory. Skipping...\")\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/create/","title":"create","text":"<p>Create command package.</p>"},{"location":"reference/ssb_project_cli/ssb_project/create/create/","title":"create","text":"<p>Create command module.</p>"},{"location":"reference/ssb_project_cli/ssb_project/create/create/#ssb_project_cli.ssb_project.create.create.create_project","title":"<code>create_project(project_name, description, repo_privacy, add_github, github_token, working_directory, home_path, github_org_name, template_repo_url, checkout, name, email, verify_config=True, no_kernel=False)</code>","text":"<p>Create an SSB-project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>project name</p> required <code>description</code> <code>str</code> <p>project description</p> required <code>repo_privacy</code> <code>RepoPrivacy</code> <p>repository visibility setting</p> required <code>add_github</code> <code>bool</code> <p>Create a GitHub repository if true</p> required <code>github_token</code> <code>str</code> <p>GitHub PAT</p> required <code>working_directory</code> <code>Path</code> <p>Current working directory</p> required <code>home_path</code> <code>Path</code> <p>Home Path</p> required <code>github_org_name</code> <code>str</code> <p>Name of GitHub organization</p> required <code>template_repo_url</code> <code>str</code> <p>The Cookiecutter template URI.</p> required <code>checkout</code> <code>str | None</code> <p>The git reference to check against. Supports branches, tags and commit hashes.</p> required <code>name</code> <code>str | None</code> <p>The project author's name (optional).</p> required <code>email</code> <code>str | None</code> <p>The project author's email (optional).</p> required <code>verify_config</code> <code>bool</code> <p>Determines if gitconfig is verified.</p> <code>True</code> <code>no_kernel</code> <code>bool</code> <p>Determines if a kernel shall be generated or not.</p> <code>False</code> Source code in <code>ssb_project_cli/ssb_project/create/create.py</code> <pre><code>def create_project(  # noqa: C901\n    project_name: str,\n    description: str,\n    repo_privacy: RepoPrivacy,\n    add_github: bool,\n    github_token: str,\n    working_directory: Path,\n    home_path: Path,\n    github_org_name: str,\n    template_repo_url: str,\n    checkout: str | None,\n    name: str | None,\n    email: str | None,\n    verify_config: bool = True,\n    no_kernel: bool = False,\n) -&gt; None:\n    \"\"\"Create an SSB-project.\n\n    Args:\n        project_name: project name\n        description: project description\n        repo_privacy: repository visibility setting\n        add_github:  Create a GitHub repository if true\n        github_token: GitHub PAT\n        working_directory: Current working directory\n        home_path: Home Path\n        github_org_name: Name of GitHub organization\n        template_repo_url: The Cookiecutter template URI.\n        checkout: The git reference to check against. Supports branches, tags and commit hashes.\n        name: The project author's name (optional).\n        email: The project author's email (optional).\n        verify_config: Determines if gitconfig is verified.\n        no_kernel: Determines if a kernel shall be generated or not.\n    \"\"\"\n    is_memory_full()\n\n    if not is_valid_project_name(project_name):\n        print(\"Project name cannot contain uppercase letters.\")\n        exit(1)\n\n    if not valid_repo_name(project_name):\n        print(\n            \"Invalid repo name: Please choose a valid name. For example: 'my-fantastic-project'\"\n        )\n\n        exit(1)\n\n    if add_github and not github_token:\n        github_token = choose_login(home_path)\n\n    if add_github and not github_token:\n        print(\"Needs GitHub token, please specify with --github-token\")\n        exit(1)\n\n    if add_github and is_github_repo(github_token, project_name, github_org_name):\n        print(\n            f\"A repo with the name {project_name} already exists on GitHub. Please choose another name.\"\n        )\n        exit(1)\n\n    if add_github and description == \"\":\n        description = request_project_description()\n\n    project_directory = working_directory.joinpath(project_name)\n\n    if project_directory.exists():\n        print(\n            \"A project with name {!r} already exists. Please choose another name.\".format(\n                project_name\n            )\n        )\n        exit(1)\n\n    try:\n        create_project_from_template(\n            project_name,\n            description,\n            template_repo_url,\n            checkout,\n            working_directory,\n            name=name,\n            email=email,\n        )\n        build_project(\n            project_directory,\n            working_directory,\n            template_repo_url,\n            checkout,\n            verify_config,\n            no_kernel,\n        )\n\n        git_repo_dir = Path(working_directory.joinpath(project_name))\n        if add_github:\n            print(\"Creating an empty repo on Github\")\n            repo_url = create_github(\n                github_token, project_name, repo_privacy, description, github_org_name\n            )\n\n            print(\"Creating a local repo, and pushing to Github\")\n            make_git_repo_and_push(github_token, repo_url, git_repo_dir)\n\n            print(\"Setting branch protection rules\")\n            set_branch_protection_rules(github_token, project_name, github_org_name)\n\n            print(f\":white_check_mark:\\tCreated Github repo. View it here: {repo_url}\")\n        else:\n            make_and_init_git_repo(git_repo_dir)\n\n        print(\n            f\":white_check_mark:\\tCreated project ({project_name}) in the folder {project_directory}\"\n        )\n        print(\n            \":tada:\\tAll done! Visit the Dapla manual to see how to use your project: https://manual.dapla.ssb.no/ssbproject.html\"\n        )\n    except Exception as e:\n        create_error_log(str(e), \"create\")\n        delete_folder(project_directory)\n    except (SystemExit, KeyboardInterrupt):\n        delete_folder(project_directory)\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/create/create/#ssb_project_cli.ssb_project.create.create.delete_folder","title":"<code>delete_folder(folder)</code>","text":"<p>Deletes directory if it exists.</p> <p>Parameters:</p> Name Type Description Default <code>folder</code> <code>Path</code> <p>Path of folder to delete</p> required Source code in <code>ssb_project_cli/ssb_project/create/create.py</code> <pre><code>def delete_folder(folder: Path) -&gt; None:\n    \"\"\"Deletes directory if it exists.\n\n    Args:\n        folder: Path of folder to delete\n    \"\"\"\n    if folder.is_dir():\n        try:\n            rmtree(folder)\n        except shutil.Error as e:\n            create_error_log(str(e), \"delete_dir\")\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/create/create/#ssb_project_cli.ssb_project.create.create.is_memory_full","title":"<code>is_memory_full()</code>","text":"<p>Checks whether used memory is greater than 95% and terminates the program if that is the case.</p> Source code in <code>ssb_project_cli/ssb_project/create/create.py</code> <pre><code>def is_memory_full() -&gt; None:\n    \"\"\"Checks whether used memory is greater than 95% and terminates the program if that is the case.\"\"\"\n    # get the memory usage information\n    virtual_memory = psutil.virtual_memory()\n    swap_memory = psutil.swap_memory()\n\n    # calculate the percentage of virtual memory used\n    if virtual_memory.total &gt; 0:\n        virtual_used_percent = virtual_memory.used / virtual_memory.total * 100\n\n        # check if the percentage of used memory is greater than 95 percent\n        if virtual_used_percent &gt; 95:\n            print(\n                \"Remaining free memory is less than 5%. Please free some memory (for example by terminating running programs) before continuing. Terminating.\"\n            )\n            exit(1)\n\n    # calculate the percentage of swap memory used\n    if swap_memory.total &gt; 0:\n        swap_used_percent = swap_memory.used / swap_memory.total * 100\n\n        # check if the percentage of used memory is greater than 95 percent\n        if swap_used_percent &gt; 95:\n            print(\n                \"Remaining free memory is less than 5%. Please free some memory (for example by terminating running programs) before continuing. Terminating.\"\n            )\n            exit(1)\n\n    # Get the disk usage information for the partition hosting home directories\n    if os.path.exists(\"/home/jovyan/\"):\n        home_dir = (\n            \"/home/jovyan/\"\n            if not running_onprem(JUPYTER_IMAGE_SPEC)\n            else \"/ssb/bruker/\"\n        )\n        disk_usage = psutil.disk_usage(home_dir)\n\n        # Calculate the percentage of used disk space\n        disk_used_percent = disk_usage.used / disk_usage.total * 100\n\n        # Check if the percentage of used disk space is greater than 95 percent\n        if disk_used_percent &gt; 95:\n            print(\n                \"Remaining disk space is less than 5%. Please free some disk space before creating a new project. Terminating.\"\n            )\n            exit(1)\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/create/create/#ssb_project_cli.ssb_project.create.create.is_valid_project_name","title":"<code>is_valid_project_name(project_name)</code>","text":"<p>Checks if project name does not contain uppercase letters.</p> Source code in <code>ssb_project_cli/ssb_project/create/create.py</code> <pre><code>def is_valid_project_name(project_name: str) -&gt; bool:\n    \"\"\"Checks if project name does not contain uppercase letters.\"\"\"\n    return not any(char.isupper() for char in project_name)\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/create/github/","title":"github","text":"<p>This module contains GitHub related functionality used when creating ssb-projects.</p>"},{"location":"reference/ssb_project_cli/ssb_project/create/github/#ssb_project_cli.ssb_project.create.github.create_github","title":"<code>create_github(github_token, repo_name, repo_privacy, repo_description, github_org_name)</code>","text":"<p>Creates a GitHub repository with name, description and privacy setting.</p> <p>Parameters:</p> Name Type Description Default <code>github_token</code> <code>str</code> <p>GitHub personal access token</p> required <code>repo_name</code> <code>str</code> <p>Repository name</p> required <code>repo_privacy</code> <code>str</code> <p>Repository privacy setting, see RepoPrivacy for more information</p> required <code>repo_description</code> <code>str</code> <p>Repository description</p> required <code>github_org_name</code> <code>str</code> <p>Name of GitHub organization</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Repository url</p> Source code in <code>ssb_project_cli/ssb_project/create/github.py</code> <pre><code>def create_github(\n    github_token: str,\n    repo_name: str,\n    repo_privacy: str,\n    repo_description: str,\n    github_org_name: str,\n) -&gt; str:\n    \"\"\"Creates a GitHub repository with name, description and privacy setting.\n\n    Args:\n        github_token: GitHub personal access token\n        repo_name: Repository name\n        repo_privacy: Repository privacy setting, see RepoPrivacy for more information\n        repo_description: Repository description\n        github_org_name: Name of GitHub organization\n\n    Returns:\n        str: Repository url\n    \"\"\"\n    g = get_environment_specific_github_object(github_token)\n\n    try:\n        # Ignoring mypy warning: Unexpected keyword argument \"visibility\"\n        # for \"create_repo\" of \"Organization\"  [call-arg]\n        g.get_organization(github_org_name).create_repo(\n            repo_name,\n            visibility=repo_privacy,\n            auto_init=False,\n            description=repo_description,\n        )\n    except BadCredentialsException:\n        print(\"Error: Invalid Github credentials\")\n        create_error_log(\n            \"\".join(format_exc()),\n            \"create_github\",\n        )\n        exit(1)\n\n    repo = g.get_repo(f\"{github_org_name}/{repo_name}\")\n    repo.replace_topics([\"ssb-project\"])\n\n    return repo.clone_url\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/create/github/#ssb_project_cli.ssb_project.create.github.get_environment_specific_github_object","title":"<code>get_environment_specific_github_object(github_token)</code>","text":"<p>Creates and returns a <code>Github</code> object with appropriate settings based on the environment.</p> <p>Parameters:</p> Name Type Description Default <code>github_token</code> <code>str</code> <p>A personal access token for authenticating with the GitHub API.</p> required <p>Returns:</p> Type Description <code>Github</code> <p>A <code>Github</code> object that can be used to interact with the GitHub API.</p> <p>This function creates a <code>Github</code> object that is specific to the current environment. If the function is running in the onprem environment, SSL verification uses /etc/ssl/certs/ca-certificates.crt. Otherwise, SSL verification is enabled.</p> Source code in <code>ssb_project_cli/ssb_project/create/github.py</code> <pre><code>def get_environment_specific_github_object(github_token: str) -&gt; Github:\n    \"\"\"Creates and returns a `Github` object with appropriate settings based on the environment.\n\n    Args:\n        github_token: A personal access token for authenticating with the GitHub API.\n\n    Returns:\n        A `Github` object that can be used to interact with the GitHub API.\n\n    This function creates a `Github` object that is specific to the current environment.\n    If the function is running in the onprem environment, SSL verification uses /etc/ssl/certs/ca-certificates.crt.\n    Otherwise, SSL verification is enabled.\n    \"\"\"\n    if running_onprem(JUPYTER_IMAGE_SPEC):\n        # CA bundle to use, supplying this fixes the onprem error \"CERTIFICATE_VERIFY_FAILED\"\n        # verify can be boolean or string, we have to type ignore because mypy expects it to be a bool\n        return Github(github_token, verify=\"/etc/ssl/certs/ca-certificates.crt\")\n    else:\n        return Github(github_token)\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/create/github/#ssb_project_cli.ssb_project.create.github.get_github_pat","title":"<code>get_github_pat(path)</code>","text":"<p>Gets GitHub users and PAT from .gitconfig and .netrc.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>Path to folder containing GitHub credentials.</p> required <p>Returns:</p> Type Description <code>dict[str, str]</code> <p>dict[str, str]: A dict with user as key and PAT as value.</p> Source code in <code>ssb_project_cli/ssb_project/create/github.py</code> <pre><code>def get_github_pat(path: Path) -&gt; dict[str, str]:\n    \"\"\"Gets GitHub users and PAT from .gitconfig and .netrc.\n\n    Args:\n        path: Path to folder containing GitHub credentials.\n\n    Returns:\n        dict[str, str]: A dict with user as key and PAT as value.\n    \"\"\"\n    user_token_dict = get_github_pat_from_gitcredentials(\n        path\n    ) | get_github_pat_from_netrc(path)\n\n    if not user_token_dict:\n        print(\n            \"Could not find your github token. Add it manually with the --github-token &lt;TOKEN&gt; option\\n or fix it by following this guide: https://manual.dapla.ssb.no/git-github.html#sec-pat\"\n        )\n        exit(1)\n    return user_token_dict\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/create/github/#ssb_project_cli.ssb_project.create.github.get_github_pat_from_gitcredentials","title":"<code>get_github_pat_from_gitcredentials(credentials_path)</code>","text":"<p>Gets GitHub users and PAT from .gitconfig.</p> <p>Parameters:</p> Name Type Description Default <code>credentials_path</code> <code>Path</code> <p>Path to folder containing .git-credentials</p> required <p>Returns:</p> Type Description <code>dict[str, str]</code> <p>dict[str, str]: A dict with user as key and PAT as value.</p> Source code in <code>ssb_project_cli/ssb_project/create/github.py</code> <pre><code>def get_github_pat_from_gitcredentials(credentials_path: Path) -&gt; dict[str, str]:\n    \"\"\"Gets GitHub users and PAT from .gitconfig.\n\n    Args:\n        credentials_path: Path to folder containing .git-credentials\n\n    Returns:\n        dict[str, str]: A dict with user as key and PAT as value.\n    \"\"\"\n    git_credentials_file = credentials_path.joinpath(Path(\".git-credentials\"))\n    user_token_dict: dict[str, str] = {}\n\n    if not git_credentials_file.exists():\n        return user_token_dict\n\n    with open(git_credentials_file) as f:\n        lines = f.readlines()\n        for line in lines:\n            p = re.compile(\"https://([A-Za-z0-9_-]+):([A-Za-z0-9_]+)@github.com\")\n            res = p.match(line)\n\n            if res:\n                user = res.group(1)\n                token = res.group(2)\n                user_token_dict[user] = token\n\n    return user_token_dict\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/create/github/#ssb_project_cli.ssb_project.create.github.get_github_pat_from_netrc","title":"<code>get_github_pat_from_netrc(netrc_path)</code>","text":"<p>Gets GitHub users and PAT from .netrc.</p> <p>Parameters:</p> Name Type Description Default <code>netrc_path</code> <code>Path</code> <p>Path to folder containing .netrc</p> required <p>Returns:</p> Type Description <code>dict[str, str]</code> <p>dict[str, str]: A dict with user as key and PAT as value.</p> Source code in <code>ssb_project_cli/ssb_project/create/github.py</code> <pre><code>def get_github_pat_from_netrc(netrc_path: Path) -&gt; dict[str, str]:\n    \"\"\"Gets GitHub users and PAT from .netrc.\n\n    Args:\n        netrc_path: Path to folder containing .netrc\n\n    Returns:\n        dict[str, str]: A dict with user as key and PAT as value.\n    \"\"\"\n    credentials_netrc_file = netrc_path.joinpath(Path(\".netrc\"))\n    user_token_dict: dict[str, str] = {}\n\n    if not credentials_netrc_file.exists():\n        return user_token_dict\n\n    with open(credentials_netrc_file) as f:\n        lines = f.readlines()\n        for line in lines:\n            p = re.compile(\n                \"machine github.com login ([A-Za-z0-9_-]+) password ([A-Za-z0-9_]+)\"\n            )\n            res = p.match(line)\n\n            if res:\n                user = res.group(1)\n                token = res.group(2)\n                user_token_dict[user] = token\n\n    return user_token_dict\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/create/github/#ssb_project_cli.ssb_project.create.github.get_github_username","title":"<code>get_github_username(github, github_token)</code>","text":"<p>Get the user's GitHub username.</p> <p>If running on-prem, prompt the user to select their username from a list of organization members. Otherwise, retrieve the user's username from GitHub.</p> <p>Parameters:</p> Name Type Description Default <code>github</code> <code>Github</code> <p>An instance of the <code>Github</code> class.</p> required <code>github_token</code> <code>str</code> <p>GitHub API token.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The user's GitHub username.</p> Source code in <code>ssb_project_cli/ssb_project/create/github.py</code> <pre><code>def get_github_username(github: Github, github_token: str) -&gt; str:\n    \"\"\"Get the user's GitHub username.\n\n    If running on-prem, prompt the user to select their username from a list of\n    organization members. Otherwise, retrieve the user's username from GitHub.\n\n    Args:\n        github: An instance of the `Github` class.\n        github_token: GitHub API token.\n\n    Returns:\n        str: The user's GitHub username.\n    \"\"\"\n    if running_onprem(JUPYTER_IMAGE_SPEC):\n        org_members = get_org_members(github_token)\n        user_value: str = questionary.autocomplete(\n            message=\"Enter your GitHub username:\",\n            choices=org_members,\n            style=prompt_autocomplete_style,\n            validate=lambda text: text.lower()\n            in [member.lower() for member in org_members],\n        ).ask()\n        return user_value\n    else:\n        return github.get_user().login\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/create/github/#ssb_project_cli.ssb_project.create.github.get_org_members","title":"<code>get_org_members(github_token)</code>","text":"<p>Returns a list of login names for all members of a GitHub organization.</p> <p>Parameters:</p> Name Type Description Default <code>github_token</code> <code>str</code> <p>GitHub API token.</p> required <p>Returns:</p> Name Type Description <code>list</code> <code>list[str]</code> <p>A list of strings, where each string is the login name of a member of the organization.</p> Source code in <code>ssb_project_cli/ssb_project/create/github.py</code> <pre><code>def get_org_members(github_token: str) -&gt; list[str]:\n    \"\"\"Returns a list of login names for all members of a GitHub organization.\n\n    Args:\n        github_token: GitHub API token.\n\n    Returns:\n        list: A list of strings, where each string is the login name of a member of the organization.\n    \"\"\"\n    # Set up the API endpoint URL and initial query parameters\n    url = f\"https://api.github.com/orgs/{GITHUB_ORG_NAME}/members\"\n    params = {\"per_page\": 100, \"page\": 1}\n    headers = {\"Authorization\": f\"Bearer {github_token}\"}\n\n    # Store usernames\n    github_usernames = []\n\n    while True:\n        response = requests.get(\n            url,\n            headers=headers,\n            params=params,\n            timeout=20,\n            verify=\"/etc/ssl/certs/ca-certificates.crt\",\n        )\n\n        if response.status_code == 200:\n            members = response.json()\n            if len(members) == 0:\n                break\n\n            for member in members:\n                github_usernames.append(member[\"login\"])\n            params[\"page\"] += 1\n        else:\n            print(\"Error: could not retrieve member list\")\n            response_json, response_status = response.json(), response.status_code\n            create_error_log(f\"{response_json=}, {response_status=}\", \"get_org_members\")\n            exit(1)\n\n    return github_usernames\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/create/github/#ssb_project_cli.ssb_project.create.github.is_github_repo","title":"<code>is_github_repo(token, repo_name, github_org_name)</code>","text":"<p>Checks if a Repository already exists in the organization.</p> <p>Parameters:</p> Name Type Description Default <code>repo_name</code> <code>str</code> <p>Repository name</p> required <code>token</code> <code>str</code> <p>GitHub personal access token</p> required <code>github_org_name</code> <code>str</code> <p>Name of GitHub organization</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the repository exists, else false.</p> Source code in <code>ssb_project_cli/ssb_project/create/github.py</code> <pre><code>def is_github_repo(token: str, repo_name: str, github_org_name: str) -&gt; bool:\n    \"\"\"Checks if a Repository already exists in the organization.\n\n    Args:\n        repo_name:  Repository name\n        token: GitHub personal access token\n        github_org_name: Name of GitHub organization\n\n    Returns:\n        True if the repository exists, else false.\n    \"\"\"\n    try:\n        get_environment_specific_github_object(token).get_repo(\n            f\"{github_org_name}/{repo_name}\"\n        )\n    except ValueError:\n        print(\n            \"The provided Github credentials are invalid. Please check that your personal access token is not expired.\"\n        )\n        exit(1)\n    except GithubException:\n        return False\n    else:\n        return True\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/create/github/#ssb_project_cli.ssb_project.create.github.set_branch_protection_rules","title":"<code>set_branch_protection_rules(github_token, repo_name, github_org_name)</code>","text":"<p>Sets branch default protection rules.</p> <p>The following rules are set: Main branch pull requests requires a minimum of 1 reviewer. Reviews that are no longer valid can be dismissed. When you dismiss a review, you must add a comment explaining why you dismissed it.</p> <p>Parameters:</p> Name Type Description Default <code>github_token</code> <code>str</code> <p>GitHub personal access token</p> required <code>repo_name</code> <code>str</code> <p>name of repository</p> required <code>github_org_name</code> <code>str</code> <p>Name of GitHub organization</p> required Source code in <code>ssb_project_cli/ssb_project/create/github.py</code> <pre><code>def set_branch_protection_rules(\n    github_token: str, repo_name: str, github_org_name: str\n) -&gt; None:\n    \"\"\"Sets branch default protection rules.\n\n    The following rules are set:\n    Main branch pull requests requires a minimum of 1 reviewer.\n    Reviews that are no longer valid can be dismissed.\n    When you dismiss a review, you must add a comment explaining why you dismissed it.\n\n    Args:\n        github_token: GitHub personal access token\n        repo_name: name of repository\n        github_org_name: Name of GitHub organization\n    \"\"\"\n    repo = get_environment_specific_github_object(github_token).get_repo(\n        f\"{github_org_name}/{repo_name}\"\n    )\n    repo.get_branch(\"main\").edit_protection(\n        required_approving_review_count=1,\n        dismiss_stale_reviews=True,\n        enforce_admins=True,\n        # Need to supply the line under as a workaround until PyGithub is updated to v2\n        users_bypass_pull_request_allowances=[],\n    )\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/create/github/#ssb_project_cli.ssb_project.create.github.valid_repo_name","title":"<code>valid_repo_name(name)</code>","text":"<p>Checks if the supplied name is suitable for a git repo.</p> Accepts <ul> <li>ASCII characters upper and lower case</li> <li>Underscores</li> <li>Hyphens</li> <li>3 characters or longer</li> </ul> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Supplied repo name</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the string is a valid repo name</p> Source code in <code>ssb_project_cli/ssb_project/create/github.py</code> <pre><code>def valid_repo_name(name: str) -&gt; bool:\n    \"\"\"Checks if the supplied name is suitable for a git repo.\n\n    Accepts:\n     - ASCII characters upper and lower case\n     - Underscores\n     - Hyphens\n     - 3 characters or longer\n\n    Args:\n        name: Supplied repo name\n\n    Returns:\n        bool: True if the string is a valid repo name\n    \"\"\"\n    return len(name) &gt;= 3 and re.fullmatch(\"^[a-zA-Z0-9-_]+$\", name) is not None\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/create/local_repo/","title":"local_repo","text":"<p>This module contains functions used to set up a local git repository with ssb-project.</p>"},{"location":"reference/ssb_project_cli/ssb_project/create/local_repo/#ssb_project_cli.ssb_project.create.local_repo.create_project_from_template","title":"<code>create_project_from_template(project_name, description, template_repo_url, checkout, working_directory, license_year=None, name=None, email=None, override_dir=None)</code>","text":"<p>Creates a project from CookieCutter template.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>Name of project</p> required <code>description</code> <code>str</code> <p>Project description</p> required <code>license_year</code> <code>Optional[str]</code> <p>Year to be inserted into the LICENSE</p> <code>None</code> <code>template_repo_url</code> <code>str</code> <p>The Cookiecutter template URI.</p> required <code>checkout</code> <code>str | None</code> <p>The git reference to check against. Supports branches, tags and commit hashes.</p> required <code>working_directory</code> <code>Path</code> <p>Working directory</p> required <code>name</code> <code>Optional[str]</code> <p>Optional name of project owner</p> <code>None</code> <code>email</code> <code>Optional[str]</code> <p>Optional email of project owner</p> <code>None</code> <code>override_dir</code> <code>Optional[Path]</code> <p>Used to hard set working_directory.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>Path of project.</p> Source code in <code>ssb_project_cli/ssb_project/create/local_repo.py</code> <pre><code>def create_project_from_template(\n    project_name: str,\n    description: str,\n    template_repo_url: str,\n    checkout: str | None,\n    working_directory: Path,\n    license_year: Optional[str] = None,\n    name: Optional[str] = None,\n    email: Optional[str] = None,\n    override_dir: Optional[Path] = None,\n) -&gt; Path:\n    \"\"\"Creates a project from CookieCutter template.\n\n    Args:\n        project_name: Name of project\n        description: Project description\n        license_year: Year to be inserted into the LICENSE\n        template_repo_url: The Cookiecutter template URI.\n        checkout: The git reference to check against. Supports branches, tags and commit hashes.\n        working_directory: Working directory\n        name: Optional name of project owner\n        email: Optional email of project owner\n        override_dir: Used to hard set working_directory.\n\n    Returns:\n        Path: Path of project.\n    \"\"\"\n    if override_dir is None:\n        project_dir = working_directory\n    else:\n        project_dir = override_dir\n\n    if not (name and email):\n        name, email = extract_name_email()\n        if not (name and email):\n            name, email = request_name_email()\n\n    template_info = {\n        \"project_name\": project_name,\n        \"description\": description,\n        \"full_name\": name,\n        \"email\": email,\n        \"license_year\": license_year or str(datetime.now().year),\n    }\n    cruft.create(\n        template_git_url=template_repo_url,\n        checkout=checkout,\n        output_dir=project_dir,\n        no_input=(template_repo_url == STAT_TEMPLATE_REPO_URL),\n        extra_context=template_info,\n    )\n    project_root = project_dir / project_name\n    check_and_remove_onprem_source(project_root)\n    poetry_update_lockfile_dependencies(project_root)\n\n    return project_dir\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/create/local_repo/#ssb_project_cli.ssb_project.create.local_repo.extract_name_email","title":"<code>extract_name_email()</code>","text":"<p>Grabs email and name from git config.</p> <p>Returns:</p> Name Type Description <code>name</code> <code>str</code> <p>Value of user.name from git config element</p> <code>email</code> <code>str</code> <p>Value of user.email from git config element</p> Source code in <code>ssb_project_cli/ssb_project/create/local_repo.py</code> <pre><code>def extract_name_email() -&gt; tuple[str, str]:\n    \"\"\"Grabs email and name from git config.\n\n    Returns:\n        name: Value of user.name from git config element\n        email: Value of user.email from git config element\n    \"\"\"\n    name = get_gitconfig_element(\"user.name\")\n    email = get_gitconfig_element(\"user.email\")\n    return name, email\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/create/local_repo/#ssb_project_cli.ssb_project.create.local_repo.get_gitconfig_element","title":"<code>get_gitconfig_element(element)</code>","text":"<p>Grabs a property from git config.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>str</code> <p>Name of the git config element retrive</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Value of git config element</p> Source code in <code>ssb_project_cli/ssb_project/create/local_repo.py</code> <pre><code>def get_gitconfig_element(element: str) -&gt; str:\n    \"\"\"Grabs a property from git config.\n\n    Args:\n        element: Name of the git config element retrive\n\n    Returns:\n        str: Value of git config element\n    \"\"\"\n    cmd = [\"git\", \"config\", \"--get\", element]\n    result = subprocess.run(  # noqa: S603 no untrusted input\n        cmd, stdout=subprocess.PIPE, encoding=\"utf-8\"\n    )\n\n    return result.stdout.strip()\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/create/local_repo/#ssb_project_cli.ssb_project.create.local_repo.make_and_init_git_repo","title":"<code>make_and_init_git_repo(repo_dir)</code>","text":"<p>Makes and pushes a GitHub repository.</p> <p>Inits a local repository, adds all files and commits.</p> <p>Parameters:</p> Name Type Description Default <code>repo_dir</code> <code>Path</code> <p>Path to local Repository</p> required <p>Returns:</p> Name Type Description <code>Repo</code> <code>Repo</code> <p>Repository</p> Source code in <code>ssb_project_cli/ssb_project/create/local_repo.py</code> <pre><code>def make_and_init_git_repo(repo_dir: Path) -&gt; Repo:\n    \"\"\"Makes and pushes a GitHub repository.\n\n    Inits a local repository, adds all files and commits.\n\n    Args:\n        repo_dir: Path to local Repository\n\n    Returns:\n        Repo: Repository\n    \"\"\"\n    repo = Repo.init(repo_dir)\n    repo.git.add(\"-A\")\n    repo.index.commit(\"Initial commit\")\n    repo.git.branch(\"-M\", \"main\")\n    return repo\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/create/local_repo/#ssb_project_cli.ssb_project.create.local_repo.make_git_repo_and_push","title":"<code>make_git_repo_and_push(github_token, github_url, repo_dir)</code>","text":"<p>Makes and pushes a GitHub repository.</p> <p>Inits a local repository and tries to push it to GitHub,  for more information see TempGitRemote.</p> <p>Parameters:</p> Name Type Description Default <code>github_token</code> <code>str</code> <p>GitHub personal access token</p> required <code>github_url</code> <code>str</code> <p>Repository url</p> required <code>repo_dir</code> <code>Path</code> <p>Path to local Repository</p> required Source code in <code>ssb_project_cli/ssb_project/create/local_repo.py</code> <pre><code>def make_git_repo_and_push(github_token: str, github_url: str, repo_dir: Path) -&gt; None:\n    \"\"\"Makes and pushes a GitHub repository.\n\n    Inits a local repository and tries to push it to GitHub,\n     for more information see TempGitRemote.\n\n    Args:\n        github_token: GitHub personal access token\n        github_url: Repository url\n        repo_dir: Path to local Repository\n    \"\"\"\n    repo = make_and_init_git_repo(repo_dir)\n\n    github_username = get_github_username(\n        get_environment_specific_github_object(github_token), github_token\n    )\n    credential_url = mangle_url(github_url, github_token)\n    username_url = mangle_url(github_url, github_username)\n\n    with temp_git_repo.TempGitRemote(repo, credential_url, username_url):\n        repo.git.push(\"--set-upstream\", \"origin\", \"main\")\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/create/local_repo/#ssb_project_cli.ssb_project.create.local_repo.mangle_url","title":"<code>mangle_url(url, mangle_name)</code>","text":"<p>Create url mangled with a string: credential or username.</p> Source code in <code>ssb_project_cli/ssb_project/create/local_repo.py</code> <pre><code>def mangle_url(url: str, mangle_name: str) -&gt; str:\n    \"\"\"Create url mangled with a string: credential or username.\"\"\"\n    mangle_name = mangle_name + \"@\"\n    split_index = url.find(\"//\") + 2\n    return url[:split_index] + mangle_name + url[split_index:]\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/create/local_repo/#ssb_project_cli.ssb_project.create.local_repo.reset_project_git_configuration","title":"<code>reset_project_git_configuration(project_name, template_repo_url, checkout, project_directory)</code>","text":"<p>Overrides .gitattributes and .gitignore inn a given project directory.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>Name of project.</p> required <code>template_repo_url</code> <code>str</code> <p>URL for the chosen template.</p> required <code>checkout</code> <code>str | None</code> <p>The git reference to check against. Supports branches, tags and commit hashes.</p> required <code>project_directory</code> <code>Path</code> <p>Directory of the project.</p> required Source code in <code>ssb_project_cli/ssb_project/create/local_repo.py</code> <pre><code>def reset_project_git_configuration(\n    project_name: str,\n    template_repo_url: str,\n    checkout: str | None,\n    project_directory: Path,\n) -&gt; None:\n    \"\"\"Overrides .gitattributes and .gitignore inn a given project directory.\n\n    Args:\n        project_name: Name of project.\n        template_repo_url: URL for the chosen template.\n        checkout: The git reference to check against. Supports branches, tags and commit hashes.\n        project_directory: Directory of the project.\n    \"\"\"\n    files = [\".gitattributes\", \".gitignore\"]\n    try:\n        with tempfile.TemporaryDirectory() as tempdir:\n            create_project_from_template(\n                project_name,\n                \"\",\n                template_repo_url,\n                checkout,\n                Path(tempdir),\n                name=None,\n                email=None,\n                override_dir=Path(tempdir),\n            )\n            for file in files:\n                shutil.copy(\n                    tempdir / Path(project_name) / Path(file),\n                    project_directory / Path(file),\n                )\n    except Exception as e:\n        print(\":x:\\tCould not restore .gitattributes .gitignore.\")\n        create_error_log(f\"{e}\", \"reset_project_git_configuration\")\n    print(\":white_check_mark:\\tRestored recommended .gitattributes .gitignore.\")\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/create/prompt/","title":"prompt","text":"<p>This module contains prompts used when creating a ssb-project.</p>"},{"location":"reference/ssb_project_cli/ssb_project/create/prompt/#ssb_project_cli.ssb_project.create.prompt.choose_login","title":"<code>choose_login(path)</code>","text":"<p>Asks the user to pick between stored GitHub usernames.</p> <p>If GitHub credentials are not found users is promoted to input PAT.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>Path to folder containing GitHub credentials</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>GitHub personal access token</p> Source code in <code>ssb_project_cli/ssb_project/create/prompt.py</code> <pre><code>def choose_login(path: Path) -&gt; str:\n    \"\"\"Asks the user to pick between stored GitHub usernames.\n\n    If GitHub credentials are not found users is promoted to input PAT.\n\n    Args:\n        path: Path to folder containing GitHub credentials\n\n    Returns:\n        str: GitHub personal access token\n    \"\"\"\n    user_token_dict: dict[str, str] = get_github_pat(path)\n\n    if len(user_token_dict) == 1:\n        return list(user_token_dict.values())[0]\n    if user_token_dict:\n        choice = questionary.select(\n            \"Select your GitHub account:\", choices=user_token_dict.keys()  # type: ignore\n        ).ask()\n        return user_token_dict[choice]\n    else:\n        pat: str = questionary.password(\n            \"Enter your GitHub personal access token:\"\n        ).ask()\n        return pat\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/create/prompt/#ssb_project_cli.ssb_project.create.prompt.request_name_email","title":"<code>request_name_email()</code>","text":"<p>Requests name and email from user.</p> <p>Returns:</p> Type Description <code>tuple[str, str]</code> <p>tuple[str, str]: User supplied name and email</p> Source code in <code>ssb_project_cli/ssb_project/create/prompt.py</code> <pre><code>def request_name_email() -&gt; tuple[str, str]:\n    \"\"\"Requests name and email from user.\n\n    Returns:\n        tuple[str, str]: User supplied name and email\n    \"\"\"\n    name = typer.prompt(\"Enter your full name: \")\n    email = typer.prompt(\"Enter your email: \")\n    return name, email\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/create/prompt/#ssb_project_cli.ssb_project.create.prompt.request_project_description","title":"<code>request_project_description()</code>","text":"<p>Prompts the user for a project description.</p> <p>Continues to prompt the user until a non-empty string is supplied.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Project description</p> Source code in <code>ssb_project_cli/ssb_project/create/prompt.py</code> <pre><code>def request_project_description() -&gt; str:\n    \"\"\"Prompts the user for a project description.\n\n    Continues to prompt the user until a non-empty string is supplied.\n\n    Returns:\n         str: Project description\n    \"\"\"\n    description: str = typer.prompt(\"Project description\")\n\n    if description == \"\":\n        description = request_project_description()\n\n    return description\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/create/repo_privacy/","title":"repo_privacy","text":"<p>This module contains the RepoPrivacy class.</p>"},{"location":"reference/ssb_project_cli/ssb_project/create/repo_privacy/#ssb_project_cli.ssb_project.create.repo_privacy.RepoPrivacy","title":"<code>RepoPrivacy</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Class with predefined privacy enums.</p> Source code in <code>ssb_project_cli/ssb_project/create/repo_privacy.py</code> <pre><code>class RepoPrivacy(str, Enum):\n    \"\"\"Class with predefined privacy enums.\"\"\"\n\n    internal = \"internal\"\n    private = \"private\"\n    public = \"public\"\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/create/temp_git_repo/","title":"temp_git_repo","text":"<p>This module contains the TempGitRemote class.</p>"},{"location":"reference/ssb_project_cli/ssb_project/create/temp_git_repo/#ssb_project_cli.ssb_project.create.temp_git_repo.TempGitRemote","title":"<code>TempGitRemote</code>","text":"<p>Context manager class for creating and cleaning up a temporary git remote.</p> Source code in <code>ssb_project_cli/ssb_project/create/temp_git_repo.py</code> <pre><code>class TempGitRemote:\n    \"\"\"Context manager class for creating and cleaning up a temporary git remote.\"\"\"\n\n    def __init__(self, repo: Repo, temp_url: str, restore_url: str) -&gt; None:\n        \"\"\"Inits a TempGitRepo.\n\n        Args:\n            repo: Git repository\n            temp_url: Temp url\n            restore_url: Restore url\n        \"\"\"\n        self.repo = repo\n        self.temp_url = temp_url\n        self.restore_url = restore_url\n\n    def __enter__(self) -&gt; None:\n        \"\"\"Deletes remote in Repository and creates remote at temp_url.\"\"\"\n        for remote in self.repo.remotes:\n            self.repo.delete_remote(remote)\n        self.origin = self.repo.create_remote(\"origin\", self.temp_url)\n        return None\n\n    # Look up\n    def __exit__(\n        self,\n        exc_type: Optional[Type[BaseException]],\n        exc_val: Optional[BaseException],\n        exc_tb: Optional[TracebackType],\n    ) -&gt; None:\n        \"\"\"Deletes remote self.origin and creates a remote named origin with an url.\"\"\"\n        self.repo.delete_remote(self.origin)\n        self.repo.create_remote(\"origin\", self.restore_url)\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/create/temp_git_repo/#ssb_project_cli.ssb_project.create.temp_git_repo.TempGitRemote.__enter__","title":"<code>__enter__()</code>","text":"<p>Deletes remote in Repository and creates remote at temp_url.</p> Source code in <code>ssb_project_cli/ssb_project/create/temp_git_repo.py</code> <pre><code>def __enter__(self) -&gt; None:\n    \"\"\"Deletes remote in Repository and creates remote at temp_url.\"\"\"\n    for remote in self.repo.remotes:\n        self.repo.delete_remote(remote)\n    self.origin = self.repo.create_remote(\"origin\", self.temp_url)\n    return None\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/create/temp_git_repo/#ssb_project_cli.ssb_project.create.temp_git_repo.TempGitRemote.__exit__","title":"<code>__exit__(exc_type, exc_val, exc_tb)</code>","text":"<p>Deletes remote self.origin and creates a remote named origin with an url.</p> Source code in <code>ssb_project_cli/ssb_project/create/temp_git_repo.py</code> <pre><code>def __exit__(\n    self,\n    exc_type: Optional[Type[BaseException]],\n    exc_val: Optional[BaseException],\n    exc_tb: Optional[TracebackType],\n) -&gt; None:\n    \"\"\"Deletes remote self.origin and creates a remote named origin with an url.\"\"\"\n    self.repo.delete_remote(self.origin)\n    self.repo.create_remote(\"origin\", self.restore_url)\n</code></pre>"},{"location":"reference/ssb_project_cli/ssb_project/create/temp_git_repo/#ssb_project_cli.ssb_project.create.temp_git_repo.TempGitRemote.__init__","title":"<code>__init__(repo, temp_url, restore_url)</code>","text":"<p>Inits a TempGitRepo.</p> <p>Parameters:</p> Name Type Description Default <code>repo</code> <code>Repo</code> <p>Git repository</p> required <code>temp_url</code> <code>str</code> <p>Temp url</p> required <code>restore_url</code> <code>str</code> <p>Restore url</p> required Source code in <code>ssb_project_cli/ssb_project/create/temp_git_repo.py</code> <pre><code>def __init__(self, repo: Repo, temp_url: str, restore_url: str) -&gt; None:\n    \"\"\"Inits a TempGitRepo.\n\n    Args:\n        repo: Git repository\n        temp_url: Temp url\n        restore_url: Restore url\n    \"\"\"\n    self.repo = repo\n    self.temp_url = temp_url\n    self.restore_url = restore_url\n</code></pre>"}]}